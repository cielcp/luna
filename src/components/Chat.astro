---
export const prerender = false;
---

<div class="flex flex-col gap-8 h-full w-full px-24">
  <div id="history" class="flex flex-col overflow-y-auto"></div>
  <div
    id="message-form"
    class="flex mt-auto border border-black rounded-full mb-12">
    <input
      id="user"
      type="text"
      name="userInput"
      class="bg-transparent w-full px-3 py-2 rounded-full sm:text-sm focus:"
      placeholder="Message Luna"
    />
    <button
      id="submit-button"
      class="bg-black text-white rounded-full m-2"
      type="submit">
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg">
        <path
          d="M11 20V7.825L5.4 13.425L4 12L12 4L20 12L18.6 13.425L13 7.825V20H11Z"
          fill="currentColor"></path>
      </svg>
    </button>
  </div>
</div>

<script>
  // Initialize chat history with the system prompt
  let chatHistory = [
    {
      role: "system",
      content:
        "you are named Luna. out of the following list: anger, sympathy, fear, happiness, sadness, excitement, and neutral, pick the emotion that best fits your own response and put it in parenthesis at the beginning of your response",
    },
  ];

  // Function to get chat completion from the server-side endpoint
  async function getChatCompletion() {
    try {
      const response = await fetch("/endpoint", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ chatHistory }),
      });

      if (!response.ok) {
        throw new Error("Failed to fetch data");
      }

      return await response.json();
    } catch (error) {
      console.error("Error:", error);
      return {
        choices: [{ message: { content: "Sorry, something went wrong." } }],
      };
    }
  }

  // Function to handle sending user message and receiving response
  async function handleUserMessage(userInput) {
    chatHistory.push({ role: "user", content: userInput });
    const chatCompletion = await getChatCompletion();
    const assistantMessage =
      chatCompletion.choices[0]?.message?.content || "No response";
    chatHistory.push({ role: "assistant", content: assistantMessage });
    return assistantMessage;
  }

  // Function to display messaging history
  function displayMessages() {
    const historyDiv = document.getElementById("history");
    historyDiv.innerHTML = ""; // Clear previous messages
    for (let i = 1; i < chatHistory.length; i++) {
      const msg = chatHistory[i];
      const messageDiv = document.createElement("div");
      messageDiv.classList.add(
        "p-2",
        "px-4",
        "rounded-3xl",
        "max-w-xs",
        "mb-2"
      );
      if (msg.role === "user") {
        messageDiv.classList.add(
          "border",
          "border-black",
          "self-end",
          "text-black"
        );
      } else if (msg.role === "assistant") {
        messageDiv.classList.add("bg-black", "self-start", "text-off-white");
      }
      messageDiv.textContent = msg.content;
      historyDiv.appendChild(messageDiv);
    }
  }

  async function enterMessage() {
    const user = (document.getElementById("user") as HTMLInputElement).value;
    if (user) {
      document.getElementById("user").value = "";
      await handleUserMessage(user);
    }
    displayMessages();
  }

  document
    .getElementById("submit-button")
    .addEventListener("click", enterMessage);

  document.getElementById("user").addEventListener("keydown", function (event) {
    if (event.key === "Enter") {
      enterMessage();
    }
  });
</script>
